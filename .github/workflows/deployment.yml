name: Deployment

on:
  workflow_dispatch:
  push:

# prevents error acquiring Terraform's state lock
concurrency: deployment

env:
  PRODUCTION_REF: refs/heads/main

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3
          role-to-assume: arn:aws:iam::332944743618:role/mynotif-infra-deployment-automation-role
          role-duration-seconds: 1200
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      # so we can leverage caching during the build phase
      - run: make docker/pull || true
      - run: make docker/build
      - name: docker push
        if: github.ref == env.PRODUCTION_REF
        run: make docker/push
  migrations:
    runs-on: ubuntu-latest
    env:
      DATABASE_ENGINE: django.db.backends.postgresql
      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
      DATABASE_USER: ${{ secrets.DATABASE_USER }}
      DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      DATABASE_PORT: 5432
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.13
      - run: make run/migrations/check
      - name: Migrations Apply
        if: github.ref == env.PRODUCTION_REF
        run: make run/migrations/apply
  terraform:
    runs-on: ubuntu-latest
    needs: docker
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
      - run: make devops/terraform/init
      # Checks that all Terraform configuration files adhere to a canonical format
      - run: make lint/terraform
      # Generates an execution plan for Terraform
      - run: make devops/terraform/plan
      - name: Terraform Apply
        if: github.ref == env.PRODUCTION_REF
        run: |
          make devops/terraform/apply
          make devops/aws/redeploy/apprunner
